# coding: utf-8

"""
    Morph API

    REST API of the multi-node/multi-drive Morph object storage.

    The version of the OpenAPI document: v0.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class S3DetailedTokenInfo(BaseModel):
    """
    S3DetailedTokenInfo
    """ # noqa: E501
    create_bucket: StrictBool = Field(description="When set to true, this token grants permission to create buckets. Note that this option enables `setBucketEacl` as well.", alias="createBucket")
    delete_bucket: StrictBool = Field(description="When set to true, this token grants permission to delete buckets.", alias="deleteBucket")
    set_bucket_eacl: StrictBool = Field(description="When set to true, this token grants permission to set buckets EACLs.", alias="setBucketEACL")
    read_content: StrictBool = Field(description="When set to true, this token grants permission to read objects.", alias="readContent")
    read_headers: StrictBool = Field(description="When set to true, this token grants permission to read objects headers.", alias="readHeaders")
    create: StrictBool = Field(description="When set to true, this token grants permission to create objects.")
    delete: StrictBool = Field(description="When set to true, this token grants permission to delete objects.")
    expires_at: datetime = Field(description="Estimated time when token will expire in RFC 3339 format.", alias="expiresAt")
    created_at: datetime = Field(description="Time when token was issued in RFC 3339 format.", alias="createdAt")
    name: StrictStr = Field(description="User-defined token name")
    container_name: StrictStr = Field(description="When set to non empty value, it restricts the token to function exclusively within this bucket,", alias="containerName")
    __properties: ClassVar[List[str]] = ["createBucket", "deleteBucket", "setBucketEACL", "readContent", "readHeaders", "create", "delete", "expiresAt", "createdAt", "name", "containerName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of S3DetailedTokenInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of S3DetailedTokenInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createBucket": obj.get("createBucket") if obj.get("createBucket") is not None else True,
            "deleteBucket": obj.get("deleteBucket") if obj.get("deleteBucket") is not None else True,
            "setBucketEACL": obj.get("setBucketEACL") if obj.get("setBucketEACL") is not None else True,
            "readContent": obj.get("readContent"),
            "readHeaders": obj.get("readHeaders"),
            "create": obj.get("create"),
            "delete": obj.get("delete"),
            "expiresAt": obj.get("expiresAt"),
            "createdAt": obj.get("createdAt"),
            "name": obj.get("name"),
            "containerName": obj.get("containerName")
        })
        return _obj


