# coding: utf-8

"""
    Morph API

    REST API of the multi-node/multi-drive Morph object storage.

    The version of the OpenAPI document: v0.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class V1S3CreateAccessTokenRequest(BaseModel):
    """
    V1S3CreateAccessTokenRequest
    """ # noqa: E501
    ttl: Optional[StrictStr] = Field(default='30 days.', description="The value can be set in minutes, hours or as a date. Note that the actual token lifetime will be converted into epochs, which may cause a slight variation from the specified value.")
    create_bucket: Optional[StrictBool] = Field(default=True, description="When set to true, this token grants permission to create buckets. Note that this option enables `setBucketEacl` as well.", alias="createBucket")
    delete_bucket: Optional[StrictBool] = Field(default=True, description="When set to true, this token grants permission to delete buckets.", alias="deleteBucket")
    set_bucket_eacl: Optional[StrictBool] = Field(default=True, description="When set to true, this token grants permission to set buckets EACLs.", alias="setBucketEACL")
    read_content: Optional[StrictBool] = Field(default=True, description="Flag allowing to read objects with this token.", alias="readContent")
    read_headers: Optional[StrictBool] = Field(default=True, description="Flag allowing to read headers objects with this token.", alias="readHeaders")
    create: Optional[StrictBool] = Field(default=True, description="Flag allowing to create objects with this token.")
    delete: Optional[StrictBool] = Field(default=True, description="Flag allowing to delete objects with this token.")
    container_name: Optional[StrictStr] = Field(default=None, description="When set to a non-empty value, this restricts the token to function exclusively within this bucket.", alias="containerName")
    token_name: Annotated[str, Field(strict=True, max_length=256)] = Field(description="User defined token name. It may contain \"a-z\", \"A-Z\", \"0-9\", \".\", \"-\", \" \".", alias="tokenName")
    __properties: ClassVar[List[str]] = ["ttl", "createBucket", "deleteBucket", "setBucketEACL", "readContent", "readHeaders", "create", "delete", "containerName", "tokenName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1S3CreateAccessTokenRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1S3CreateAccessTokenRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ttl": obj.get("ttl") if obj.get("ttl") is not None else '30 days.',
            "createBucket": obj.get("createBucket") if obj.get("createBucket") is not None else True,
            "deleteBucket": obj.get("deleteBucket") if obj.get("deleteBucket") is not None else True,
            "setBucketEACL": obj.get("setBucketEACL") if obj.get("setBucketEACL") is not None else True,
            "readContent": obj.get("readContent") if obj.get("readContent") is not None else True,
            "readHeaders": obj.get("readHeaders") if obj.get("readHeaders") is not None else True,
            "create": obj.get("create") if obj.get("create") is not None else True,
            "delete": obj.get("delete") if obj.get("delete") is not None else True,
            "containerName": obj.get("containerName"),
            "tokenName": obj.get("tokenName")
        })
        return _obj


