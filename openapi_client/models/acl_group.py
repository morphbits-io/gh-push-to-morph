# coding: utf-8

"""
    Morph API

    REST API of the multi-node/multi-drive Morph object storage.

    The version of the OpenAPI document: v0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictBool
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ACLGroup(BaseModel):
    """
    ACLGroup
    """ # noqa: E501
    read_content: StrictBool = Field(description="Flag allows to read object payload. Requires ReadHeaders flag.", alias="readContent")
    read_headers: StrictBool = Field(description="Flag allows to read headers without object payload.", alias="readHeaders")
    create: StrictBool = Field(description="Flag allows to create new objects.")
    delete: StrictBool = Field(description="Flag allow to delete objects. Requires Create and ReadHeaders flags.")
    __properties: ClassVar[List[str]] = ["readContent", "readHeaders", "create", "delete"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ACLGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ACLGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "readContent": obj.get("readContent"),
            "readHeaders": obj.get("readHeaders"),
            "create": obj.get("create"),
            "delete": obj.get("delete")
        })
        return _obj


