# coding: utf-8

"""
    Morph API

    REST API of the multi-node/multi-drive Morph object storage.

    The version of the OpenAPI document: v0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.get_bucket_response import GetBucketResponse

class TestGetBucketResponse(unittest.TestCase):
    """GetBucketResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetBucketResponse:
        """Test GetBucketResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetBucketResponse`
        """
        model = GetBucketResponse()
        if include_optional:
            return GetBucketResponse(
                creation_date = '2022-11-21T07:12:42.686806470Z',
                name = 'my-bucket',
                basic_acl = openapi_client.models.basic_acl.BasicACL(
                    final = True, 
                    sticky = True, 
                    owner = openapi_client.models.acl_group.ACLGroup(
                        read_content = True, 
                        read_headers = True, 
                        create = True, 
                        delete = True, ), 
                    others = openapi_client.models.acl_group.ACLGroup(
                        read_content = True, 
                        read_headers = True, 
                        create = True, 
                        delete = True, ), ),
                e_acl = openapi_client.models.eacl.EACL(
                    records = [
                        openapi_client.models.eacl_record.EACLRecord(
                            operation = [
                                'GET'
                                ], 
                            action = [
                                'ALLOW'
                                ], 
                            filters = [
                                openapi_client.models.record_filter.RecordFilter(
                                    header_type = [
                                        'REQUEST'
                                        ], 
                                    match_type = [
                                        'STRING_EQUAL'
                                        ], 
                                    key = '', 
                                    value = '', )
                                ], 
                            targets = [
                                openapi_client.models.record_target.RecordTarget(
                                    role = [
                                        'USER'
                                        ], 
                                    keys = [
                                        ''
                                        ], )
                                ], )
                        ], ),
                placement_policy = openapi_client.models.placement_policy.PlacementPolicy(
                    replicas = [
                        openapi_client.models.replica.Replica(
                            count = 56, 
                            selector = '', )
                        ], 
                    container_backup_factor = 56, 
                    selectors = [
                        openapi_client.models.selector.Selector(
                            name = '', 
                            count = 56, 
                            attribute = '', 
                            filter = '', 
                            clause = [
                                'SAME'
                                ], )
                        ], 
                    filters = [
                        openapi_client.models.placement_filter.PlacementFilter(
                            name = '', 
                            key = '', 
                            op = [
                                'EQ'
                                ], 
                            value = '', 
                            filters = [
                                openapi_client.models.placement_filter.PlacementFilter(
                                    name = '', 
                                    key = '', 
                                    op = [
                                        'EQ'
                                        ], 
                                    value = '', 
                                    filters = [
                                        
                                        ], )
                                ], )
                        ], ),
                owner = 'NcdVB1HWxGzgXErPHgLuk3gYYobtzoHWuD'
            )
        else:
            return GetBucketResponse(
                creation_date = '2022-11-21T07:12:42.686806470Z',
                name = 'my-bucket',
                basic_acl = openapi_client.models.basic_acl.BasicACL(
                    final = True, 
                    sticky = True, 
                    owner = openapi_client.models.acl_group.ACLGroup(
                        read_content = True, 
                        read_headers = True, 
                        create = True, 
                        delete = True, ), 
                    others = openapi_client.models.acl_group.ACLGroup(
                        read_content = True, 
                        read_headers = True, 
                        create = True, 
                        delete = True, ), ),
                e_acl = openapi_client.models.eacl.EACL(
                    records = [
                        openapi_client.models.eacl_record.EACLRecord(
                            operation = [
                                'GET'
                                ], 
                            action = [
                                'ALLOW'
                                ], 
                            filters = [
                                openapi_client.models.record_filter.RecordFilter(
                                    header_type = [
                                        'REQUEST'
                                        ], 
                                    match_type = [
                                        'STRING_EQUAL'
                                        ], 
                                    key = '', 
                                    value = '', )
                                ], 
                            targets = [
                                openapi_client.models.record_target.RecordTarget(
                                    role = [
                                        'USER'
                                        ], 
                                    keys = [
                                        ''
                                        ], )
                                ], )
                        ], ),
                placement_policy = openapi_client.models.placement_policy.PlacementPolicy(
                    replicas = [
                        openapi_client.models.replica.Replica(
                            count = 56, 
                            selector = '', )
                        ], 
                    container_backup_factor = 56, 
                    selectors = [
                        openapi_client.models.selector.Selector(
                            name = '', 
                            count = 56, 
                            attribute = '', 
                            filter = '', 
                            clause = [
                                'SAME'
                                ], )
                        ], 
                    filters = [
                        openapi_client.models.placement_filter.PlacementFilter(
                            name = '', 
                            key = '', 
                            op = [
                                'EQ'
                                ], 
                            value = '', 
                            filters = [
                                openapi_client.models.placement_filter.PlacementFilter(
                                    name = '', 
                                    key = '', 
                                    op = [
                                        'EQ'
                                        ], 
                                    value = '', 
                                    filters = [
                                        
                                        ], )
                                ], )
                        ], ),
                owner = 'NcdVB1HWxGzgXErPHgLuk3gYYobtzoHWuD',
        )
        """

    def testGetBucketResponse(self):
        """Test GetBucketResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
